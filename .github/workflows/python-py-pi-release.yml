name: python-py-pi-release

on:
  workflow_call:
    inputs:
      git-email:
        type: string
        description: Git user email address
        required: true
      git-user:
        type: string
        description: Git user username
        required: true
      python-version:
        type: number
        description: Version of Python to use
        required: false
        default: 3.13
      bump-part:
        type: string
        description: Part of semantic version number to bump
        required: false
        default: minor
      run-code-coverage:
        type: boolean
        description: Value indicating if code coverage step should run
        required: true
    secrets:
      codecov-token:
        description: Codecov code coverage token
        required: true
      py-pi-token:
        description: Py PI token for publishing Python packages to Python Package Index
        required: true
      workflow-token:
        description: GitHub workflow token for pushing automated commits
        required: true

jobs:
  python-py-pi-release:
    name: Python PyPI Release
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/${{ github.event.repository.name }}
    permissions:
      contents: write
      id-token: write
    if: ${{ contains(github.event.pull_request.labels.*.name, 'release') && github.event.pull_request.merged == true }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false
          token: ${{ secrets.workflow-token }}

      - name: Setup Git
        run: |
          git config user.email ${GIT_EMAIL}
          git config user.name ${GIT_USER}
          git config url.https://$GITHUB_TOKEN@github.com/.insteadOf https://github.com/
        env:
          GIT_EMAIL: ${{ inputs.git-email }}
          GIT_USER: ${{ inputs.git-user }}
          GITHUB_TOKEN: ${{ secrets.workflow-token }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'

      - name: Display Python Version
        run: python -c "import sys; print(sys.version)"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools
          pip install -r requirements.txt

      - name: Install Build
        run: python -m pip install build --user

      - name: Build Binary Wheel and Source Tarball
        run: python -m build

      - name: Upload Distribution Packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Download Distribution Packages
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Sign Distribution Packages
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Publish Distribution Package
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Set Release Version and Tag
        id: set_release_and_tag
        uses: callowayproject/bump-my-version@master
        env:
          BUMPVERSION_TAG: true
        with:
          args: ${{ inputs.bump-part }}
          github-token: ${{ secrets.workflow-token }}

      - name: Get Release Version
        run: |
          echo "RELEASE_VERSION=${{ steps.set_release_and_tag.outputs.previous-version }}" >> $GITHUB_ENV
          echo "NEXT_DEV_VERSION=${{ steps.set_release_and_tag.outputs.current-version }}" >> $GITHUB_ENV

      - name: Set Next Project Version
        run: |
          sed -i "s/^\s*version = \".*\"/version = \"$NEXT_DEV_VERSION\"/" pyproject.toml
          git add pyproject.toml
          git commit -m "Update next Python project version from $RELEASE_VERSION to $NEXT_DEV_VERSION"

      - name: Push Next Project Version Change
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.workflow-token }}
          branch: ${{ github.ref }}

      - name: Upload Artifact Signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.workflow-token }}
        run: >-
          gh release upload
          "$GITHUB_REF_NAME" dist/**
          --repo "$GITHUB_REPOSITORY"

      - name: Create GitHub Release
        env:
          RELEASE_NOTES: ${{ github.event.pull_request.body }}
          GITHUB_TOKEN: ${{ secrets.workflow-token }}
        run: >-
          CLEAN_RELEASE_NOTES=$(echo RELEASE_NOTES | sed 's/["'\''`]/ /g')
          echo "CLEAN_RELEASE_NOTES=CLEAN_RELEASE_NOTES" >> $GITHUB_ENV
          gh release create
          "$RELEASE_VERSION"
          --repo "$GITHUB_REPOSITORY"
          --title "$GITHUB_REF_NAME"
          --notes "$CLEAN_RELEASE_NOTES"

      - name: Download Coverage
        if: ${{ inputs.run-code-coverage == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: ./coverage.xml

      - name: Coverage
        if: ${{ inputs.run-code-coverage == 'true' }}
        uses: codecov/codecov-action@v5.4.0
        with:
          files: ./coverage.xml
          verbose: true
          token: ${{ secrets.codecov-token }}
